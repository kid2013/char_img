# -*- coding: utf-8  -*-
"""

this file is used to generate npz file for the char list
one npz file per char image and
one npz file containing for the char image data as a whole

"""
import os
import shutil
import sys
import codecs
import cv2 as cv
import numpy as np
import pygame
from pygame.locals import *
from config import  common_cfg, gen_npz_cfg,  STYLES, write_config
from gen_list import get_all_char_list
from img_process import img_trans
import pdb


try:
    import pygame.freetype as freetype
except ImportError:
    print ("No FreeType support compiled")
    sys.exit ()


def write_res(cur_config, char_list, img_list) :
    """

    this function writes the final result todisk
    there are three types of  result
    the first  is the npz file for all char image data stack together as whole in one npz file named after npz_save_file
    the second is the txt file saving the configuration information  for this generation named after txt_save_file
    the last is a directory which named 'char' containing all npz files , one per char, for corresponding image data

    Args
                cur_config(dict) : a dictionary to hold current configuration for char image generation
                char_list(list) : a list with all char names in it
                img_ list(list): a list of images generated by pygame , list shape is N x H x W x C
                                            N: number of  images, also is the length of char_list
                                            H: height of the char image
                                            W: width  of the char image
                                            C: channel  of the char image, with order [r, g, b]

    """
    #======================================
    #           rename the space char ' '  with 'space'
    #======================================
    # char_list[0] = 'space'
    #======================================
    #       stack the image array
    #======================================
    print 'stacking'
    img_arr = np.stack(img_list, axis = 0)
    del img_list
    print img_arr.shape
    assert len(char_list) == img_arr.shape[0]

    #======================================
    #       output directory
    #======================================
    results_dir = common_cfg['results_dir']
    results_dir = os.path.join(results_dir, cur_config['cur_generation_name'])
    if os.path.exists(results_dir) :
        shutil.rmtree(results_dir)
    os.mkdir(results_dir)
    npz_save_file = os.path.join(results_dir, cur_config['cur_generation_name']) + '.npz'
    txt_save_file = os.path.join(results_dir, cur_config['cur_generation_name']) + '.txt'
    print 'save npz'
    np.savez_compressed(npz_save_file, img_arr)
    del img_arr
    print 'save config'
    write_config(cur_config, txt_save_file )

    #======================================
    #                          save char index and name
    #======================================
    print 'save char index name file'
    char_index_name_file = os.path.join(results_dir, common_cfg['char_index_name'])
    char_fw = codecs.open(char_index_name_file, 'w', 'utf-8')
    for idx, char_name in enumerate(char_list) :
        char_fw.write(str(idx) +'_'+ char_name + '\n')
    char_fw.close()

def get_config_num():
    """
    obtain total number of configurations and the number of configuration for those items
    for example: the configuration number of item 'bg_color' is stored in num[0]
                              total number of configurations is in num[-1]
    Return
                 num(np.array) : a np.array object, the last element stores all possible configuration nums
                                                the others store corresponding num of configs for each item

    """
    num = np.ones((6,), dtype=np.int)
    num[0] = len(gen_npz_cfg['bg_color'])
    num[1] = len(gen_npz_cfg['font'])
    num[2] = len(gen_npz_cfg['pos_x'])
    num[3] = len(gen_npz_cfg['style'])
    num[4] = len(gen_npz_cfg['img_op'])
    num[-1] = np.prod(num)
    return num


def init_cur_config() :
    """
                init current config: get the config item in gen_npz_cfg which won't change in current setting
                Return
                               cur_config(dict) : a dict object keeps common config among all configs

    """
    cur_config = {}
    cur_config['screen_size'] = gen_npz_cfg['screen_size']
    cur_config['font_size'] = gen_npz_cfg['font_size']
    cur_config['rotate'] = gen_npz_cfg['rotate']
    cur_config['cur_generation_name'] = gen_npz_cfg['cur_generation_name']
    return cur_config


def get_cur_config(cur_num, config_num, cur_config) :
    """
          get current config based on cur_num
          the index num : cur_num and the 
                 index tuple:(bg_color_idx, font_idx, pos_x_idx, style_idx, img_op_idx)
          have an one-to-one mapping
          Args
                      cur_num(int) : an integer indicates current generation index
                      config_num(np.array): return of function get_cur_config
                      cur_config(dict):  a dict object to keep current configuration
          Return
                      cur_config(dict):  a dict object keeps current configuration

    """
    # pdb.set_trace()
    num_name = cur_num
    img_op_idx = cur_num % config_num[4]
    cur_num /= config_num[4]
    style_idx = cur_num % config_num[3]
    cur_num /= config_num[3]
    pos_x_idx = cur_num % config_num[2]
    cur_num /= config_num[2]
    font_idx = cur_num % config_num[1]
    cur_num /= config_num[1]
    bg_color_idx = cur_num % config_num[0]
    cur_config['bg_color'] = gen_npz_cfg['bg_color'][bg_color_idx]
    cur_config['fg_color'] = gen_npz_cfg['fg_color'][bg_color_idx]
    cur_config['font'] = gen_npz_cfg['font'][font_idx]
    cur_config['pos_x'] = gen_npz_cfg['pos_x'][pos_x_idx]
    cur_config['pos_y'] = gen_npz_cfg['pos_y'][pos_x_idx]
    cur_config['style'] = gen_npz_cfg['style'][style_idx]
    cur_config['img_op'] = gen_npz_cfg['img_op'][img_op_idx]
    cur_config['cur_generation_name'] = gen_npz_cfg['cur_generation_name'] + '{0:=04}'.format(num_name)
    print cur_config['cur_generation_name']
    return cur_config


def get_cur_img_list(cur_config, char_list):
    """
    produce image list based on current config and char list by pygame

    Args
            cur_config(dict) : current configuration
            char_list(list): a list of char to generate image
    Return
            img_list(list): a list of images produced

    """
    #======================================
    #                          get current font property
    #======================================
    bg_color = cur_config['bg_color']
    bg_color = pygame.Color(bg_color[0], bg_color[1], bg_color[2])
    fg_color = cur_config['fg_color']
    fg_color = pygame.Color(fg_color[0], fg_color[1], fg_color[2])
    screen_color = bg_color
    screen_size = cur_config['screen_size']
    font = cur_config['font']
    font_libs = common_cfg['font_libs']
    font_path = os.path.join(font_libs, font)
    font_size = cur_config['font_size']
    x = cur_config['pos_x']
    y = cur_config['pos_y']
    rotate = cur_config['rotate']
    style =STYLES[cur_config['style']]
    img_op = cur_config['img_op']

    #======================================
    #                          init pygame
    #======================================
    pygame.init()
    screen = pygame.display.set_mode(screen_size)
    font = freetype.Font(font_path)
    font.pad = False

    """
                  generate image char by char in pygame
                  transform pygame.surface object into
                  numpy.array object and place these arrays
                  in a list for the consideration of saving time
    """
    img_list = []
    total_cnt = 0
    # pdb.set_trace()
    for inputchar in char_list :
        total_cnt += 1
        screen.fill(bg_color)
        font.render_to(screen, (x, y), inputchar,  fg_color,
                   bg_color, size=font_size,
                   style=style, rotation = rotate)
        pygame.display.flip()
        img = screen.get_view('3')
        img = np.array(img).transpose((1,0,2))
        img = img_trans(img, img_op)
        img_list.append(img)
        if total_cnt % 1000 == 0 :
            print total_cnt
    pygame.quit()
    return img_list


def run():
    # pdb.set_trace()

    """
       produce all npz files based on configs

    """

    config_num = get_config_num()
    char_list = get_all_char_list()
    cur_config = init_cur_config()
    #for cfg_i in xrange(config_num[-1]):
    for cfg_i in xrange(1):
        cur_config.update(get_cur_config(cfg_i, config_num, cur_config))
        img_list = get_cur_img_list(cur_config, char_list)
        write_res(cur_config, char_list, img_list)


if __name__ == "__main__":
     run ()
